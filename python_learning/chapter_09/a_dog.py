class Dog():# По общепринятым соглашениям имена, начинаются с символа верхнего регистра, в Python обозначают классы.
	
	# Круглые скобки в определении класса пусты, потому что класс создаётся с нуля.
	
	"""Простая модель собаки."""

	def __init__(self, name, age):
		"""Инициализирует атрибуты name и age"""
		self.name = name
		self.age = age

	def sit(self):
		"""Собака садится по команде."""
		print(self.name.title() + " is now sitting.")

	def roll_over(self):
		"""Собака перекатывается по команде."""
		print(self.name.title() + " rolled over!")
# Метод __init__ - специальный метод, который автоматически выполняется при создании каждого нового экземпляра на базе класса(в нашем случае на базе класса Dog).

# "Создание класса Dog" стр.161-162.
my_dog = Dog('willie', 6)
print("My dog's name is " + my_dog.name.title() + ".")
print("My dog is " + str(my_dog.age) + " years old.")
# Можно считать что класс-это своего рода инструкция по созданию экземпляров.

# Имя, записанное в нижнем регистре(например, my_dog), означает отдельный экземпляр, созданный на базе класса.

# Очень подробно об этой программе на стр. 163. "Создание экземпляра класса."

print(" ")

my_dog = Dog('willie', 6)
my_dog.sit()
my_dog.roll_over()
# Чтобы вызвать метод, нкжно указать экземпляр (в данном случае my_dog) и вызываемый метод, разделив из точкой.

# "Обращение к атрибутам"стр. 163-164.

print(" ")

my_dog = Dog('willie', 6)
your_dog = Dog('lucy', 3)

print("My dog's name is " + my_dog.name.title() + ".")
print("My dog is " + str(my_dog.age) + " years old.")
my_dog.sit()

print("\nYour dog's name is " + your_dog.name.title() + ".")
print("Your dog is " + str(your_dog.age) + " years old.")
your_dog.sit()
# На основе класса можно создать столько экземпляров, сколько потребуется.

"""Даже если второй собаке будут назначены те же имя и возраст, Python всё равно создаст отдельный экземпляр класса Dog.Можно создать сколько угодно экземпляров одного класса при условии, что эти экземпляры хранятся в переменных с разными именами или занимают разные позиции в списке или словаре."""

# "Создание нескольких экземпляров" стр. 164-165.
